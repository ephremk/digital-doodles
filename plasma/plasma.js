// Generated by CoffeeScript 1.3.3
(function() {

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  window.onload = function() {
    var clock, ctx, elm, pixelDensity, run, tick;
    ctx = void 0;
    elm = void 0;
    pixelDensity = void 0;
    clock = 0;
    run = function() {
      var height, width, xOffset;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.createElement('canvas');
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      ctx = elm.getContext('2d');
      document.body.appendChild(elm);
      return tick();
    };
    window.onresize = function() {
      var height, width, xOffset;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.getElementsByTagName('canvas')[0];
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      return elm.setAttribute('height', height * pixelDensity);
    };
    tick = function() {
      var index, pixelData, size, x, y, _i, _j;
      size = 400;
      pixelData = ctx.getImageData(0, 0, size, size);
      for (x = _i = 0; 0 <= size ? _i < size : _i > size; x = 0 <= size ? ++_i : --_i) {
        for (y = _j = 0; 0 <= size ? _j < size : _j > size; y = 0 <= size ? ++_j : --_j) {
          index = (y * size + x) * 4;
          pixelData.data[index] = (Math.sin(x * y / 5 + clock / 16)) * 255;
          pixelData.data[index + 1] = (Math.sin(x * y + clock / 4)) * 255;
          pixelData.data[index + 2] = (Math.cos(x * y * 4 + clock / 5)) * 255;
          pixelData.data[index + 3] = 255;
        }
      }
      ctx.putImageData(pixelData, 0, 0);
      ++clock;
      return requestAnimationFrame(tick);
    };
    return run();
  };

}).call(this);
