// Generated by CoffeeScript 1.4.0
(function() {
  var hsvToRgb;

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  window.onload = function() {
    var clock, colors, ctx, elm, i, pixelData, pixelDensity, run, size, tick, _i;
    ctx = void 0;
    elm = void 0;
    pixelDensity = void 0;
    size = 400;
    pixelData = void 0;
    clock = 80;
    colors = [];
    for (i = _i = 0; _i < 256; i = ++_i) {
      colors.push(hsvToRgb(i / 256, 1, 1));
    }
    run = function() {
      var height, val, width, xOffset, _j, _len, _ref;
      width = size;
      height = size;
      elm = document.createElement('canvas');
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      ctx = elm.getContext('2d');
      pixelData = ctx.getImageData(0, 0, size, size);
      _ref = pixelData.data;
      for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
        val = _ref[i];
        pixelData.data[i] = 255;
      }
      document.body.appendChild(elm);
      return tick();
    };
    tick = function() {
      var color, index, x, y, _j, _k;
      for (x = _j = 0; 0 <= size ? _j < size : _j > size; x = 0 <= size ? ++_j : --_j) {
        for (y = _k = 0; 0 <= size ? _k < size : _k > size; y = 0 <= size ? ++_k : --_k) {
          index = (y * size + x) << 2;
          color = (clock + (128 * Math.sin(x / 16.0)) + +(128 * Math.sin(y / 8.0)) + +(128 * Math.sin((x + y) / 16.0)) + +(128 * Math.sin(Math.sqrt(x * x + y * y) / 8.0))) & 254;
          pixelData.data[index] = colors[color][0];
          pixelData.data[index + 1] = colors[color][1];
          pixelData.data[index + 2] = colors[color][2];
        }
      }
      ctx.putImageData(pixelData, 0, 0);
      ++clock;
      return requestAnimationFrame(tick);
    };
    return run();
  };

  hsvToRgb = function(h, s, v) {
    var b, f, g, i, p, q, r, t;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;
      case 1:
        r = q;
        g = v;
        b = p;
        break;
      case 2:
        r = p;
        g = v;
        b = t;
        break;
      case 3:
        r = p;
        g = q;
        b = v;
        break;
      case 4:
        r = t;
        g = p;
        b = v;
        break;
      case 5:
        r = v;
        g = p;
        b = q;
    }
    return [r * 255, g * 255, b * 255];
  };

}).call(this);
