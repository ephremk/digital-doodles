// Generated by CoffeeScript 1.4.0
(function() {
  var orb;

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  orb = (function() {

    function orb(width, height, pixelDensity) {
      this.height = height * pixelDensity;
      this.width = width * pixelDensity;
      this.radius = 10;
      this.x = ~~((Math.random() * width) * pixelDensity) + this.radius;
      this.y = ~~(Math.random() * height * pixelDensity);
      this.velocity = {
        y: ~~(Math.random() * 5 + 4) * (~~(Math.random() * 2) ? -1 : 1),
        x: ~~(Math.random() * 5 + 4) * (~~(Math.random() * 2) ? -1 : 1)
      };
      this;

    }

    orb.prototype.checkCollisons = function(particles) {
      var dx, dy, p, radii, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = particles.length; _i < _len; _i++) {
        p = particles[_i];
        if (p !== this) {
          dx = p.x - this.x;
          dy = p.y - this.y - this.velocity.y;
          radii = this.radius + this.radius;
          if ((dx * dx) + (dy * dy) < Math.pow(radii, 2)) {
            this.velocity.y *= -0.95;
            p.velocity.y *= -0.95;
            this.velocity.x *= -0.95;
            _results.push(p.velocity.x *= -0.95);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    orb.prototype.draw = function(ctx, particles) {
      this.checkCollisons(particles);
      ctx.strokeStyle = "#FFF";
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 2 * Math.PI, 0);
      if (this.y >= this.height - this.radius * 2 - this.velocity.y || this.y + this.velocity.y <= 0) {
        this.velocity.y *= -1;
      }
      if (this.x >= this.width - this.radius * 2 - this.velocity.x || this.x + this.velocity.x <= 5) {
        this.x *= -1;
      }
      this.y += this.velocity.y;
      this.x += this.velocity.x;
      ctx.stroke();
      return ctx.closePath();
    };

    return orb;

  })();

  window.onload = function() {
    var ctx, drawParticles, elm, particles, pixelDensity, run, tick;
    ctx = void 0;
    elm = void 0;
    pixelDensity = void 0;
    particles = [];
    run = function() {
      var height, i, width, xOffset, _i;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.createElement('canvas');
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      ctx = elm.getContext('2d');
      document.body.appendChild(elm);
      for (i = _i = 0; _i <= 200; i = ++_i) {
        particles.push(new orb(width, height, pixelDensity));
      }
      return tick();
    };
    window.onresize = function() {
      var height, i, width, xOffset, _i, _results;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.getElementsByTagName('canvas')[0];
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      particles = [];
      _results = [];
      for (i = _i = 0; _i <= 200; i = ++_i) {
        _results.push(particles.push(new orb(width, height, pixelDensity)));
      }
      return _results;
    };
    drawParticles = function() {
      var p, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = particles.length; _i < _len; _i++) {
        p = particles[_i];
        _results.push(p.draw(ctx, particles));
      }
      return _results;
    };
    tick = function() {
      ctx.clearRect(0, 0, elm.width * pixelDensity, elm.height * pixelDensity);
      drawParticles();
      return requestAnimationFrame(tick);
    };
    return run();
  };

}).call(this);
