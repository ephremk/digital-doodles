// Generated by CoffeeScript 1.4.0
(function() {

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  window.onload = function() {
    var clock, ctx, drawParticles, elm, particles, pixelDensity, run, tick, xOffset, yOffset;
    ctx = void 0;
    elm = void 0;
    pixelDensity = void 0;
    clock = 0;
    xOffset = 100;
    yOffset = 100;
    particles = [];
    run = function() {
      var height, i, width, _i;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.createElement('canvas');
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      ctx = elm.getContext('2d');
      document.body.appendChild(elm);
      for (i = _i = 0; _i <= 200; i = ++_i) {
        particles.push({
          x: ~~(Math.random() * width * pixelDensity),
          y: ~~(Math.random() * height * pixelDensity)
        });
      }
      return tick();
    };
    window.onresize = function() {
      var height, i, width, _i, _results;
      width = window.innerWidth;
      height = window.innerHeight;
      elm = document.getElementsByTagName('canvas')[0];
      pixelDensity = window.devicePixelRatio || 1;
      elm.style.width = width + "px";
      elm.style.height = height + "px";
      xOffset = width * pixelDensity / 2;
      elm.setAttribute('width', width * pixelDensity);
      elm.setAttribute('height', height * pixelDensity);
      particles = [];
      _results = [];
      for (i = _i = 0; _i <= 200; i = ++_i) {
        _results.push(particles.push({
          x: ~~(Math.random() * width * pixelDensity),
          y: ~~(Math.random() * height * pixelDensity)
        }));
      }
      return _results;
    };
    drawParticles = function() {
      var p, _i, _len, _results;
      ctx.strokeStyle = "#FFF";
      _results = [];
      for (_i = 0, _len = particles.length; _i < _len; _i++) {
        p = particles[_i];
        ctx.beginPath();
        ctx.moveTo(p.x, p.y);
        ctx.lineTo(p.x, p.y + 1);
        if (p.y > elm.height * pixelDensity) {
          p.y = -10;
        }
        p.y += 10;
        _results.push(ctx.stroke());
      }
      return _results;
    };
    tick = function() {
      var i, offset, x, _i, _j;
      clock += 0.3;
      ctx.clearRect(0, 0, elm.width * pixelDensity, elm.height * pixelDensity);
      ctx.strokeStyle = "#FFF";
      for (offset = _i = 0; _i < 4; offset = ++_i) {
        x = 0;
        ctx.beginPath();
        for (i = _j = 0; _j < 500; i = ++_j) {
          ctx.lineTo(x + xOffset, i * elm.height / 19 + yOffset);
          ctx.lineTo(x + xOffset, i * elm.height / 19 + 1 + yOffset);
          x += Math.sin(i * 50 + (clock + (offset * 10)) / 6) * 25;
        }
        ctx.stroke();
      }
      drawParticles();
      return requestAnimationFrame(tick);
    };
    return run();
  };

}).call(this);
