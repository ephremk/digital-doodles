// Generated by CoffeeScript 1.4.0
(function() {
  var Particle, generateFlockingDots, mask, run;

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  window.flockingDots = [];

  generateFlockingDots = function() {
    var canvas, ctx, data, index, x, y, _i, _j, _ref, _ref1;
    canvas = document.createElement('canvas');
    canvas.setAttribute('width', mask.width);
    canvas.setAttribute('height', mask.height);
    canvas.style.position = "absolute";
    canvas.style['z-index'] = "-1";
    ctx = canvas.getContext('2d');
    ctx.drawImage(mask, 0, 0);
    data = ctx.getImageData(0, 0, mask.width, mask.height);
    for (y = _i = 0, _ref = mask.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      for (x = _j = 0, _ref1 = mask.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        index = (y * mask.width + x) * 4;
        if (data.data[index + 3]) {
          flockingDots.push({
            x: x,
            y: y
          });
        }
      }
    }
    return run();
  };

  mask = new Image;

  mask.onload = generateFlockingDots;

  run = function() {
    var ctx, elm, height, i, particles, pixelDensity, step, tick, width, _i, _ref;
    width = mask.width;
    height = mask.height;
    elm = document.createElement('canvas');
    pixelDensity = window.devicePixelRatio || 1;
    particles = [];
    elm.style.width = width + "px";
    elm.style.height = height + "px";
    elm.setAttribute('width', width * pixelDensity);
    elm.setAttribute('height', height * pixelDensity);
    ctx = elm.getContext('2d');
    document.body.appendChild(elm);
    step = 90;
    for (i = _i = 0, _ref = flockingDots.length; 0 <= _ref ? _i < _ref : _i > _ref; i = _i += step) {
      step = ~~(Math.random() * 70) + 30;
      particles.push(new Particle(ctx, width, height, pixelDensity, i, 'rgba(254, 252, 0'));
      particles.push(new Particle(ctx, width, height, pixelDensity, i, 'rgba(0, 143, 164'));
    }
    tick = function() {
      var p, _j, _len, _results;
      requestAnimationFrame(tick);
      ctx.clearRect(0, 0, width * pixelDensity, height * pixelDensity);
      _results = [];
      for (_j = 0, _len = particles.length; _j < _len; _j++) {
        p = particles[_j];
        _results.push(p.tick());
      }
      return _results;
    };
    return tick();
  };

  Particle = (function() {

    function Particle(ctx, width, height, pixelDensity, i, color, velocity) {
      this.opacity = 0;
      this.ctx = ctx;
      this.x = ~~(Math.random() * mask.width);
      this.y = ~~(Math.random() * mask.height);
      this.idealSpot = {
        x: flockingDots[i].x,
        y: flockingDots[i].y
      };
      this.velocity = {
        x: ((Math.random() * 3.5) + 0.5) * this.plusMinus(this.x, this.idealSpot.x),
        y: ((Math.random() * 3.5) + 0.5) * this.plusMinus(this.y, this.idealSpot.y)
      };
      this.color = color;
      this;

    }

    Particle.prototype.plusMinus = function(from, to) {
      if (from > to) {
        return -1;
      } else {
        return 1;
      }
    };

    Particle.prototype.draw = function() {
      this.ctx.beginPath();
      this.ctx.fillStyle = this.color + (", " + (this.opacity < 0.4 ? this.opacity += 0.0025 : this.opacity) + ")");
      this.ctx.arc(this.x, this.y, 2, 0, 2 * Math.PI);
      this.ctx.fill();
      this.ctx.closePath();
      return this;
    };

    Particle.prototype.tick = function() {
      if (Math.abs(this.x - this.idealSpot.x) <= 5) {
        this.x = this.idealSpot.x;
        this.velocity.x = 0;
      }
      if (Math.abs(this.y - this.idealSpot.y) <= 5) {
        this.y = this.idealSpot.y;
        this.velocity.y = 0;
      }
      if (this.x < 0 || this.x > 500) {
        this.velocity.x = this.velocity.x * -1 - 0.5;
      }
      if (this.y < 0 || this.y > 500) {
        this.velocity.y = this.velocity.y * -1 - 0.5;
      }
      this.x += this.velocity.x;
      this.y += this.velocity.y;
      this.draw();
      return this;
    };

    return Particle;

  })();

  mask.src = "hex.png";

}).call(this);
